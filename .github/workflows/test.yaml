name: TeamCity Tests

on: push

jobs:
  run_teamcity_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Install ifconfig
        run: sudo apt-get update && sudo apt-get install -y net-tools

      - name: Set host environment variable
        run: |
          echo "HOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]*" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)" >> $GITHUB_ENV

      - name: Create config directory and add browsers.json
        run: |
          mkdir -p config
          cp infra/browsers.json config/

      - name: Pull Selenoid Firefox/...
        run: docker pull selenoid/vnc:firefox_89.0

      - name: Run Selenoid
        run: |
          docker run -d --name selenoid                \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd)/config/:/etc/selenoid/:ro          \
          -p 4444:4444                                 \
          aerokube/selenoid

      - name: Wait for Selenoid to be ready
        run: |
          echo "Waiting for Selenoid to be ready..."
          for i in {1..30}; do
            if curl --silent --fail http://localhost:4444/wd/hub/status; then
              echo "Selenoid is ready!"
              break
            fi
            echo "Waiting for Selenoid..."
            sleep 1
          done

      - name: Run TeamCity Server
        run: |
          docker run -u 0 -d --name teamcity-server                           \
          -v $(pwd)/tmp/teamcity_server/datadir:/data/teamcity_server/datadir \
          -v $(pwd)/tmp/teamcity_server/logs:/opt/teamcity/logs               \
          -p 8111:8111                                                        \
          jetbrains/teamcity-server:2023.11.1

      - name: Clear and set config properties for server configuration
        run: |
          echo "" > src/main/resources/config.properties
          echo "hostForSetUp=$HOST:8111" >> src/main/resources/config.properties
          echo "browserForSetUp=firefox" >> src/main/resources/config.properties

      - name: Make mvnw executable
        run: chmod +x ./mvnw

      - name: Configure TeamCity Server
        run: ./mvnw clean test -Dtest=SetupTest#startUpTest

      - name: Set superUserToken environment variable
        run: echo "SUPER_USER_TOKEN=$(docker logs teamcity-server | grep 'Super user authentication token' | tail -n 1 | awk '{print $6}')" >> $GITHUB_ENV

      - name: Clear and set new config properties for tests
        run: |
          echo "" > src/main/resources/config.properties
          echo "host=$HOST:8111" >> src/main/resources/config.properties
          echo "superUserToken=$SUPER_USER_TOKEN" >> src/main/resources/config.properties
          echo "browser=firefox" >> src/main/resources/config.properties
          echo "remote=http://localhost:4444/wd/hub" >> src/main/resources/config.properties

      - name: Run TeamCity Agent
        run: |
          docker run -u 0 -d -e SERVER_URL="http://$HOST:8111"                \
          -v $(pwd)/tmp/teamcity_agent/conf:/data/teamcity_agent/conf \
          jetbrains/teamcity-agent

      - name: Wait for TeamCity Agent to start
        run: sleep 100

      - name: Authorize TeamCity Agent
        run: ./mvnw clean test -Dtest=SetupTest#setAgent

      - name: Run tests
        run: ./mvnw test

      - name: Load test report history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: target/allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

#      - name: Run Swagger coverage
#        if: always()
#        run: .swagger-coverage-commandline/bin/swagger-coverage-commandline -s http://$HOST:8111/app/rest/swagger.json -i target/swagger-coverage-output
#
#      - name: Save Swagger coverage
#        uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: swagger-coverage
#          path: |
#            swagger-coverage-report.html
#            swagger-coverage-results.json
